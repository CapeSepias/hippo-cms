Index: src/main/java/org/apache/wicket/ajax/wicket-ajax.js
===================================================================
--- src/main/java/org/apache/wicket/ajax/wicket-ajax.js	(revision 1178739)
+++ src/main/java/org/apache/wicket/ajax/wicket-ajax.js	(working copy)
@@ -1590,27 +1590,52 @@
 	},
 	
 	// Process an external stylesheet element
-	processLink: function(steps, node) {		
+	processLink: function(steps, node) {
 		steps.push(function(notify) {
 			// if the element is already in head, skip it
 			if (Wicket.Head.containsElement(node, "href")) {
 				notify();
 				return;
 			}
-			// create link element
-			var css = Wicket.Head.createElement("link");
 
-			// copy required attributes
-			css.id = node.getAttribute("id");
-			css.rel = node.getAttribute("rel");
-			css.href = node.getAttribute("href");
-			css.type = node.getAttribute("type");
-			
-			// add element to head
-			Wicket.Head.addElement(css);
-			
-			// continue to next step
-			notify();
+			var createLinkElement = function() {
+				var css = Wicket.Head.createElement("link");
+
+				// copy required attributes
+				css.id = node.getAttribute("id");
+				css.rel = node.getAttribute("rel");
+				css.href = node.getAttribute("href");
+				css.type = node.getAttribute("type");
+
+				// add element to head
+				Wicket.Head.addElement(css);
+
+				// continue to next step
+				notify();
+			};
+
+			// if the cacheBeforeRender attribute is present, we request the css to fill the browsers cache
+			// so the chance is higher the css gets rendered before other contributions are loaded
+			if (node.getAttribute("cacheBeforeRender")) {
+				var seqNumber = (Wicket.Head.csspSequenceNumber++);
+
+				// we need to schedule the request as timeout
+				// calling xml http request from another request call stack doesn't work
+				window.setTimeout(function() {
+					var req = new Wicket.Ajax.Request(node.getAttribute('href'), function() {
+						Wicket.Ajax.invokePostCallHandlers();
+						createLinkElement();
+					}, false, false);
+					req.debugContent = false;
+					if (Wicket.Browser.isKHTML())
+						// konqueror can't process the ajax response asynchronously, therefore the
+						// javascript loading must be also synchronous
+						req.async = false;
+					req.get();
+				}, 1);
+			} else {
+				createLinkElement();
+			}
 		});
 	},
 	
Index: src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java
===================================================================
--- src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java	(revision 1178739)
+++ src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java	(working copy)
@@ -933,6 +933,15 @@
 		}
 
 		@Override
+		public void renderCSSReference(final ResourceReference reference, final String media, final boolean cacheBeforeRender)
+		{
+			if (checkHeaderRendering())
+			{
+				super.renderCSSReference(reference, media, cacheBeforeRender);
+			}
+		}
+
+		@Override
 		public void renderCSSReference(String url)
 		{
 			if (checkHeaderRendering())
@@ -968,6 +977,15 @@
 			}
 		}
 
+    @Override
+		public void renderCSSReference(ResourceReference reference, boolean cacheBeforeRender)
+		{
+			if (checkHeaderRendering())
+			{
+				super.renderCSSReference(reference, cacheBeforeRender);
+			}
+		}
+
 		@Override
 		public void renderJavascriptReference(ResourceReference reference)
 		{
Index: src/main/java/org/apache/wicket/markup/html/CSSPackageResource.java
===================================================================
--- src/main/java/org/apache/wicket/markup/html/CSSPackageResource.java	(revision 1178739)
+++ src/main/java/org/apache/wicket/markup/html/CSSPackageResource.java	(working copy)
@@ -32,7 +32,7 @@
  */
 public class CSSPackageResource extends PackageResource
 {
-	private static final long serialVersionUID = 1L;;
+	private static final long serialVersionUID = 1L;
 
 	/**
 	 * Returns a new instance of {@link HeaderContributor} with a header contributor that references
@@ -48,13 +48,34 @@
 	public static final HeaderContributor getHeaderContribution(final Class<?> scope,
 		final String path)
 	{
+		return getHeaderContribution(scope, path, false);
+	}
+
+	/**
+	 * Returns a new instance of {@link HeaderContributor} with a header contributor that references
+	 * a CSS file that lives in a package.
+	 * 
+	 * @param scope
+	 *            The scope of the package resource (typically the class of the caller, or a class
+	 *            that lives in the package where the resource lives).
+	 * @param path
+	 *            The path
+	 * @param cacheBeforeRender
+	 *            if true, the resource will be pre cached by the browser before it gets rendered
+	 *            (if cache is turned on)
+	 * @return the new header contributor instance
+	 */
+	public static final HeaderContributor getHeaderContribution(final Class<?> scope,
+		final String path, final boolean cacheBeforeRender)
+	{
 		return new HeaderContributor(new IHeaderContributor()
 		{
 			private static final long serialVersionUID = 1L;
 
 			public void renderHead(IHeaderResponse response)
 			{
-				response.renderCSSReference(new CompressedResourceReference(scope, path));
+				response.renderCSSReference(new CompressedResourceReference(scope, path),
+					cacheBeforeRender);
 			}
 		});
 	}
@@ -75,13 +96,37 @@
 	public static final HeaderContributor getHeaderContribution(final Class<?> scope,
 		final String path, final String media)
 	{
+		return getHeaderContribution(scope, path, media, false);
+	}
+
+	/**
+	 * Returns a new instance of {@link HeaderContributor} with a header contributor that references
+	 * a CSS file that lives in a package.
+	 * 
+	 * @param scope
+	 *            The scope of the package resource (typically the class of the caller, or a class
+	 *            that lives in the package where the resource lives).
+	 * @param path
+	 *            The path
+	 * @param media
+	 *            The media type for this CSS ("print", "screen", etc.)
+	 * @param cacheBeforeRender
+	 *            if true, the resource will be pre cached by the browser before it gets rendered
+	 *            (if cache is turned on)
+	 * @return the new header contributor instance
+	 */
+	public static final HeaderContributor getHeaderContribution(final Class<?> scope,
+		final String path, final String media, final boolean cacheBeforeRender)
+	{
+
 		return new HeaderContributor(new IHeaderContributor()
 		{
 			private static final long serialVersionUID = 1L;
 
 			public void renderHead(IHeaderResponse response)
 			{
-				response.renderCSSReference(new CompressedResourceReference(scope, path), media);
+				response.renderCSSReference(new CompressedResourceReference(scope, path), media,
+					cacheBeforeRender);
 			}
 		});
 	}
@@ -96,6 +141,23 @@
 	 */
 	public static final HeaderContributor getHeaderContribution(final ResourceReference reference)
 	{
+		return getHeaderContribution(reference, false);
+	}
+
+	/**
+	 * Returns a new instance of {@link HeaderContributor} with a header contributor that references
+	 * a CSS file that lives in a package.
+	 * 
+	 * @param reference
+	 * 
+	 * @param cacheBeforeRender
+	 *            if true, the resource will be pre cached by the browser before it gets rendered
+	 *            (if cache is turned on)
+	 * @return the new header contributor instance
+	 */
+	public static final HeaderContributor getHeaderContribution(final ResourceReference reference,
+		final boolean cacheBeforeRender)
+	{
 		return new HeaderContributor(new IHeaderContributor()
 		{
 			private static final long serialVersionUID = 1L;
@@ -119,13 +181,31 @@
 	public static final HeaderContributor getHeaderContribution(final ResourceReference reference,
 		final String media)
 	{
+		return getHeaderContribution(reference, media, false);
+	}
+
+	/**
+	 * Returns a new instance of {@link HeaderContributor} with a header contributor that references
+	 * a CSS file that lives in a package.
+	 * 
+	 * @param reference
+	 * @param media
+	 *            The media type for this CSS ("print", "screen", etc.)
+	 * @param cacheBeforeRender
+	 *            if true, the resource will be pre cached by the browser before it gets rendered
+	 *            (if cache is turned on)
+	 * @return the new header contributor instance
+	 */
+	public static final HeaderContributor getHeaderContribution(final ResourceReference reference,
+		final String media, final boolean cacheBeforeRender)
+	{
 		return new HeaderContributor(new IHeaderContributor()
 		{
 			private static final long serialVersionUID = 1L;
 
 			public void renderHead(IHeaderResponse response)
 			{
-				response.renderCSSReference(reference, media);
+				response.renderCSSReference(reference, media, cacheBeforeRender);
 			}
 		});
 	}
Index: src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java
===================================================================
--- src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java	(revision 1178739)
+++ src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java	(working copy)
@@ -77,6 +77,21 @@
 	}
 
 	/**
+	 * @see org.apache.wicket.markup.html.IHeaderResponse#renderCSSReference(org.apache.wicket.ResourceReference, boolean)
+	 */
+	public void renderCSSReference(ResourceReference reference, boolean cacheBeforeRender) {
+		if (reference == null)
+		{
+			throw new IllegalArgumentException("reference cannot be null");
+		}
+		if (!closed)
+		{
+			CharSequence url = RequestCycle.get().urlFor(reference);
+			renderCSSReference(url.toString(), null, cacheBeforeRender);
+		}
+	}
+
+	/**
 	 * @see org.apache.wicket.markup.html.IHeaderResponse#renderCSSReference(org.apache.wicket.ResourceReference,
 	 *      java.lang.String)
 	 */
@@ -94,6 +109,21 @@
 	}
 
 	/**
+	 * @see org.apache.wicket.markup.html.IHeaderResponse#renderCSSReference(org.apache.wicket.ResourceReference, String, boolean)
+	 */
+	public void renderCSSReference(ResourceReference reference, String media, boolean cacheBeforeRender) {
+		if (reference == null)
+		{
+			throw new IllegalArgumentException("reference cannot be null");
+		}
+		if (!closed)
+		{
+			CharSequence url = RequestCycle.get().urlFor(reference);
+			renderCSSReference(url.toString(), media, cacheBeforeRender);
+		}
+	}
+
+	/**
 	 * @see org.apache.wicket.markup.html.IHeaderResponse#renderCSSReference(java.lang.String)
 	 */
 	public void renderCSSReference(String url)
@@ -109,11 +139,19 @@
 	}
 
 	/**
-	 * @see org.apache.wicket.markup.html.IHeaderResponse#renderCSSReference(java.lang.String,
-	 *      java.lang.String)
+	 * @see org.apache.wicket.markup.html.IHeaderResponse#renderCSSReference(String, String)
 	 */
 	public void renderCSSReference(String url, String media)
 	{
+		renderCSSReference(url, media, false);
+	}
+
+	/**
+	 * @see org.apache.wicket.markup.html.IHeaderResponse#renderCSSReference(String, String)
+	 * @param cacheBeforeRender
+	 *            if true ensures the css is rendered before other references are rendered, otherwise not
+	 */
+	private void renderCSSReference(String url, String media, boolean cacheBeforeRender) {
 		if (Strings.isEmpty(url))
 		{
 			throw new IllegalArgumentException("url cannot be empty or null");
@@ -123,9 +161,12 @@
 			List<Object> token = Arrays.asList(new Object[] { "css", url, media });
 			if (wasRendered(token) == false)
 			{
-				getResponse().write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
+                getResponse().write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
 				getResponse().write(url);
 				getResponse().write("\"");
+				if (cacheBeforeRender) {
+					getResponse().write(" cacheBeforeRender=\"cacheBeforeRender\" ");
+				}
 				if (media != null)
 				{
 					getResponse().write(" media=\"");
@@ -136,8 +177,7 @@
 				markRendered(token);
 			}
 		}
-	}
-
+    }
 	/**
 	 * @see org.apache.wicket.markup.html.IHeaderResponse#renderJavascriptReference(org.apache.wicket.ResourceReference)
 	 */
Index: src/main/java/org/apache/wicket/markup/html/DecoratingHeaderResponse.java
===================================================================
--- src/main/java/org/apache/wicket/markup/html/DecoratingHeaderResponse.java	(revision 1178739)
+++ src/main/java/org/apache/wicket/markup/html/DecoratingHeaderResponse.java	(working copy)
@@ -101,8 +101,18 @@
 		realResponse.renderCSSReference(url, media);
 	}
 
-	public void renderString(CharSequence string)
+	public void renderCSSReference(final ResourceReference reference, final boolean cacheBeforeRender)
 	{
+		realResponse.renderCSSReference(reference, cacheBeforeRender);
+	}
+
+	public void renderCSSReference(final ResourceReference reference, final String media, final boolean cacheBeforeRender)
+	{
+		realResponse.renderCSSReference(reference, media, cacheBeforeRender);
+	}
+
+    public void renderString(CharSequence string)
+	{
 		realResponse.renderString(string);
 	}
 
Index: src/main/java/org/apache/wicket/markup/html/IHeaderResponse.java
===================================================================
--- src/main/java/org/apache/wicket/markup/html/IHeaderResponse.java	(revision 1178739)
+++ src/main/java/org/apache/wicket/markup/html/IHeaderResponse.java	(working copy)
@@ -92,6 +92,16 @@
 
 	/**
 	 * Writes a CSS reference, if the specified reference hasn't been rendered yet.
+	 *
+	 * @param reference
+	 *            resource reference pointing to the CSS resource
+	 * @param cacheBeforeRender
+	 *            if true, the resource will be pre cached by the browser before it gets rendered (if cache is turned on)
+	 */
+	public void renderCSSReference(ResourceReference reference, boolean cacheBeforeRender);
+
+	/**
+	 * Writes a CSS reference, if the specified reference hasn't been rendered yet.
 	 * 
 	 * @param url
 	 *            url of the CSS resource
@@ -110,6 +120,18 @@
 
 	/**
 	 * Writes a CSS reference, if the specified reference hasn't been rendered yet.
+	 *
+	 * @param reference
+	 *            resource reference pointing to the CSS resource
+	 * @param media
+	 *            the media type for this CSS ("print", "screen", etc.)
+	 * @param cacheBeforeRender
+	 *            if true, the resource will be pre cached by the browser before it gets rendered (if cache is turned on)
+	 */
+	public void renderCSSReference(ResourceReference reference, String media, boolean cacheBeforeRender);
+
+	/**
+	 * Writes a CSS reference, if the specified reference hasn't been rendered yet.
 	 * 
 	 * @param url
 	 *            url of the CSS resource

