definitions:
  config:
    /hippo:configuration/hippo:update/hippo:registry/MoveDocumentTypeTranslations:
      jcr:primaryType: hipposys:updaterinfo
      hipposys:batchsize: 10
      hipposys:description: Document type translations have been moved. Run this updater
        after upgrading to Hippo 11.
      hipposys:dryrun: false
      hipposys:parameters: ''
      hipposys:query: /jcr:root/hippo:namespaces//element(*, hipposysedit:templatetype)
      hipposys:script: "package org.hippoecm.frontend.plugins.cms.admin.updater\r\n\
        \      \r\n      import org.onehippo.repository.update.BaseNodeUpdateVisitor\r\
        \n      import javax.jcr.Node\r\n      import org.hippoecm.repository.util.JcrUtils\r\
        \n      import org.hippoecm.repository.util.NodeIterable\r\n      import org.apache.commons.lang.StringUtils\r\
        \n      \r\n      \r\n      class UpdaterTemplate extends BaseNodeUpdateVisitor\
        \ {\r\n      \r\n      static final String TYPES_TRANSLATIONS_PATH = \"/hippo:configuration/hippo:translations/hippo:types\"\
        ;\r\n      static final String FIELD_TRANSLATIONS_PATH = \"editor:templates/_default_/translator/hippostd:translations\"\
        ;\r\n      static final String NODE_TYPE_PATH = \"hipposysedit:nodetype/hipposysedit:nodetype\"\
        ;\r\n      static final String FIELDS_PATH = \"editor:templates/_default_\"\
        ;\r\n      static final Collection<String> SKIP_NAMESPACES = Arrays.asList(\"\
        system\", \"hippo\", \"hippostd\", \"hippostdpubwf\", \"hipposysedit\", \"\
        hippogallery\", \"hippogallerypicker\", \"hst\", \"selection\", \"seosupport\"\
        , \"resourcebundle\");\r\n      \r\n      boolean doUpdate(Node node) {\r\n\
        \      String namespace = node.getParent().getName();\r\n      String docTypeName\
        \ = namespace + \":\" + node.getName();\r\n      if (SKIP_NAMESPACES.contains(namespace))\
        \ {\r\n      log.debug \"skipping document type ${docTypeName}\"\r\n     \
        \ return;\r\n      }\r\n      boolean update = false;\r\n      log.debug \"\
        processing document type ${docTypeName}\"\r\n      if (node.isNodeType(\"\
        hippo:translated\")) {\r\n      update = true;\r\n      moveDocumentTypeTranslations(node,\
        \ docTypeName);\r\n      node.removeMixin(\"hippo:translated\");\r\n     \
        \ }\r\n      Node fieldTranslations = getFieldTranslations(node);\r\n    \
        \  if (fieldTranslations != null) {\r\n      update = true;\r\n      Node\
        \ nodeType = getNodeType(node);\r\n      moveDocumentFieldTranslations(fieldTranslations,\
        \ namespace, docTypeName, nodeType);\r\n      fieldTranslations.getParent().remove();\r\
        \n      removeTranslatorIds(node);\r\n      }\r\n      return update\r\n \
        \     }\r\n      \r\n      void moveDocumentFieldTranslations(final Node fieldTranslations,\
        \ final String namespace, final String docTypeName, final Node nodeType) \r\
        \n      throws RepositoryException {\r\n      Node typesTranslations = fieldTranslations.getSession().getNode(TYPES_TRANSLATIONS_PATH);\r\
        \n      Node docTypeBundles = getOrCreateDocTypeResourceBundles(typesTranslations,\
        \ docTypeName);\r\n      for (Node node : new NodeIterable(fieldTranslations.getNodes()))\
        \ {\r\n      String oldKey = node.getName();\r\n      String newKey;\r\n \
        \     if (nodeType.hasNode(oldKey)) {\r\n      newKey = namespace + \":\"\
        \ + oldKey;\r\n      } else {\r\n      newKey = oldKey + \"-\" + UUID.randomUUID();\r\
        \n      log.warn \"no corresponding field found for translation key ${oldKey}.\
        \ moving it to randomized key ${newKey}\"\r\n      }\r\n      newKey = newKey.endsWith(\"\
        .hint\") ? newKey.replace(\".hint\", \"#hint\") : newKey;\r\n      for (Node\
        \ translation : new NodeIterable(node.getNodes(\"hippo:translation\"))) {\r\
        \n      String language = translation.getProperty(\"hippo:language\").getString();\r\
        \n      String message = translation.getProperty(\"hippo:message\").getString();\r\
        \n      if (StringUtils.isNotEmpty(language)) {\r\n      Node bundle = getOrCreateResourceBundle(docTypeBundles,\
        \ language);\r\n      bundle.setProperty(newKey, message);\r\n      }\r\n\
        \      }\r\n      }\r\n      }\r\n      \r\n      Node getFieldTranslations(final\
        \ Node node) throws RepositoryException {\r\n      return JcrUtils.getNodeIfExists(node,\
        \ FIELD_TRANSLATIONS_PATH);\r\n      }\r\n      \r\n      Node getNodeType(final\
        \ Node node) throws RepositoryException {\r\n      return JcrUtils.getNodeIfExists(node,\
        \ NODE_TYPE_PATH);\r\n      }\r\n      \r\n      void moveDocumentTypeTranslations(Node\
        \ node, String docTypeName) throws RepositoryException {\r\n      for (Node\
        \ translation : new NodeIterable(node.getNodes(\"hippo:translation\"))) {\r\
        \n      moveDocumentTypeTranslation(translation, docTypeName);\r\n      }\r\
        \n      }\r\n      \r\n      void moveDocumentTypeTranslation(Node translation,\
        \ String docTypeName) throws RepositoryException {\r\n      Node typesTranslations\
        \ = translation.getSession().getNode(TYPES_TRANSLATIONS_PATH);\r\n      Node\
        \ docTypeBundles = getOrCreateDocTypeResourceBundles(typesTranslations, docTypeName);\r\
        \n      String language = translation.getProperty(\"hippo:language\").getString();\r\
        \n      String message = translation.getProperty(\"hippo:message\").getString();\r\
        \n      if (StringUtils.isNotEmpty(language)) {\r\n      Node docTypeBundle\
        \ = getOrCreateResourceBundle(docTypeBundles, language);\r\n      docTypeBundle.setProperty(\"\
        jcr:name\", message);\r\n      }\r\n      }\r\n      \r\n      void removeTranslatorIds(Node\
        \ node) {\r\n      Node fields = JcrUtils.getNodeIfExists(node, FIELDS_PATH);\r\
        \n      if (fields != null) {\r\n      for (Node field : new NodeIterable(fields.getNodes()))\
        \ {\r\n      if (field.hasProperty(\"translator.id\")) {\r\n      field.getProperty(\"\
        translator.id\").remove()\r\n      }\r\n      }    \r\n      }\r\n      }\r\
        \n      \r\n      Node getOrCreateDocTypeResourceBundles(Node typesTranslations,\
        \ String docTypeName) throws RepositoryException {\r\n      if (typesTranslations.hasNode(docTypeName))\
        \ {\r\n      return typesTranslations.getNode(docTypeName);\r\n      } else\
        \ {\r\n      return typesTranslations.addNode(docTypeName, \"hipposys:resourcebundles\"\
        );\r\n      }\r\n      }\r\n      \r\n      Node getOrCreateResourceBundle(Node\
        \ bundles, String language) throws RepositoryException {\r\n      if (bundles.hasNode(language))\
        \ {\r\n      return bundles.getNode(language);\r\n      } else {\r\n     \
        \ return bundles.addNode(language, \"hipposys:resourcebundle\");\r\n     \
        \ }\r\n      }\r\n      \r\n      boolean undoUpdate(Node node) {\r\n    \
        \  throw new UnsupportedOperationException('Updater does not implement undoUpdate\
        \ method')\r\n      }\r\n      \r\n      }"
      hipposys:throttle: 1000
