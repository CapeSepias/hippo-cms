<?xml version="1.0" encoding="UTF-8"?>
<sv:node sv:name="MoveDocumentTypeTranslations" xmlns:sv="http://www.jcp.org/jcr/sv/1.0">
  <sv:property sv:name="jcr:primaryType" sv:type="Name">
    <sv:value>hipposys:updaterinfo</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:batchsize" sv:type="Long">
    <sv:value>10</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:description" sv:type="String">
    <sv:value/>
  </sv:property>
  <sv:property sv:name="hipposys:dryrun" sv:type="Boolean">
    <sv:value>false</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:parameters" sv:type="String">
    <sv:value/>
  </sv:property>
  <sv:property sv:name="hipposys:query" sv:type="String">
    <sv:value>/jcr:root/hippo:namespaces//element(*, hipposysedit:templatetype)</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:script" sv:type="String">
    <sv:value>package org.hippoecm.frontend.plugins.cms.admin.updater&#xd;
&#xd;
import org.onehippo.repository.update.BaseNodeUpdateVisitor&#xd;
import javax.jcr.Node&#xd;
import org.hippoecm.repository.util.JcrUtils;&#xd;
import org.hippoecm.repository.util.NodeIterable;&#xd;
&#xd;
&#xd;
class UpdaterTemplate extends BaseNodeUpdateVisitor {&#xd;
  &#xd;
  static final String TYPES_TRANSLATIONS_PATH = "/hippo:configuration/hippo:translations/hippo:types";&#xd;
  static final String FIELD_TRANSLATIONS_PATH = "editor:templates/_default_/translator/hippostd:translations";&#xd;
  static final Collection&lt;String&gt; SKIP_NAMESPACES = Arrays.asList("system", "hippo", "hippostd", "hippostdpubwf", "hipposysedit", "hippogallery", "hippogallerypicker", "hst");&#xd;
&#xd;
  boolean doUpdate(Node node) {&#xd;
    String namespace = node.getParent().getName();&#xd;
    String docTypeName = namespace + ":" + node.getName();&#xd;
    if (SKIP_NAMESPACES.contains(namespace)) {&#xd;
      log.debug "skipping document type ${docTypeName}"&#xd;
      return;&#xd;
    }&#xd;
    log.debug "processing document type ${docTypeName}"&#xd;
    if (node.isNodeType("hippo:translated")) {&#xd;
      moveDocumentTypeTranslations(node, docTypeName);&#xd;
    }&#xd;
    Node fieldTranslations = getFieldTranslations(node);&#xd;
    if (fieldTranslations != null) {&#xd;
      moveDocumentFieldTranslations(fieldTranslations, namespace, docTypeName);&#xd;
    }&#xd;
    return true&#xd;
  }&#xd;
&#xd;
  void moveDocumentFieldTranslations(final Node fieldTranslations, final String namespace, final String docTypeName) throws RepositoryException {&#xd;
    Node typesTranslations = fieldTranslations.getSession().getNode(TYPES_TRANSLATIONS_PATH);&#xd;
    Node docTypeBundles = getOrCreateDocTypeResourceBundles(typesTranslations, docTypeName);&#xd;
    for (Node node : new NodeIterable(fieldTranslations.getNodes())) {&#xd;
      String fieldName = namespace + ":" + node.getName();&#xd;
      for (Node translation : new NodeIterable(node.getNodes("hippo:translation"))) {&#xd;
        String language = translation.getProperty("hippo:language").getString();&#xd;
        String message = translation.getProperty("hippo:message").getString();&#xd;
        Node bundle = docTypeBundles.getNode(language);&#xd;
        bundle.setProperty(fieldName, message);&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
&#xd;
  Node getFieldTranslations(final Node node) throws RepositoryException {&#xd;
    return JcrUtils.getNodeIfExists(node, FIELD_TRANSLATIONS_PATH);&#xd;
  }&#xd;
&#xd;
  void moveDocumentTypeTranslations(Node node, String docTypeName) throws RepositoryException {&#xd;
    for (Node translation : new NodeIterable(node.getNodes("hippo:translation"))) {&#xd;
      moveDocumentTypeTranslation(translation, docTypeName);&#xd;
    }&#xd;
  }&#xd;
&#xd;
  void moveDocumentTypeTranslation(Node translation, String docTypeName) throws RepositoryException {&#xd;
    Node typesTranslations = translation.getSession().getNode(TYPES_TRANSLATIONS_PATH);&#xd;
    Node docTypeBundles = getOrCreateDocTypeResourceBundles(typesTranslations, docTypeName);&#xd;
    String language = translation.getProperty("hippo:language").getString();&#xd;
    String message = translation.getProperty("hippo:message").getString();&#xd;
    Node docTypeBundle = getOrCreateResourceBundle(docTypeBundles, language);&#xd;
    docTypeBundle.setProperty("jcr:name", message);&#xd;
  }&#xd;
&#xd;
  Node getOrCreateDocTypeResourceBundles(Node typesTranslations, String docTypeName) throws RepositoryException {&#xd;
    if (typesTranslations.hasNode(docTypeName)) {&#xd;
      return typesTranslations.getNode(docTypeName);&#xd;
    } else {&#xd;
      return typesTranslations.addNode(docTypeName, "hipposys:resourcebundles");&#xd;
    }&#xd;
  }&#xd;
&#xd;
  Node getOrCreateResourceBundle(Node bundles, String language) throws RepositoryException {&#xd;
    if (bundles.hasNode(language)) {&#xd;
      return bundles.getNode(language);&#xd;
    } else {&#xd;
      return bundles.addNode(language, "hipposys:resourcebundle");&#xd;
    }&#xd;
  }&#xd;
&#xd;
  boolean undoUpdate(Node node) {&#xd;
    throw new UnsupportedOperationException('Updater does not implement undoUpdate method')&#xd;
  }&#xd;
&#xd;
}</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:throttle" sv:type="Long">
    <sv:value>1000</sv:value>
  </sv:property>
</sv:node>
