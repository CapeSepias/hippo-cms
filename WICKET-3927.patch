Index: wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java
===================================================================
--- wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java	(revision 1030625)
+++ wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java	(revision )
@@ -77,6 +77,21 @@
 	}
 
 	/**
+	 * @see org.apache.wicket.markup.html.IHeaderResponse#renderCSSReference(org.apache.wicket.ResourceReference, boolean)
+	 */
+	public void renderCSSReference(ResourceReference reference, boolean waitForRender) {
+		if (reference == null)
+		{
+			throw new IllegalArgumentException("reference cannot be null");
+		}
+		if (!closed)
+		{
+			CharSequence url = RequestCycle.get().urlFor(reference);
+			renderCSSReference(url.toString(), null, waitForRender);
+		}
+	}
+
+	/**
 	 * @see org.apache.wicket.markup.html.IHeaderResponse#renderCSSReference(org.apache.wicket.ResourceReference,
 	 *      java.lang.String)
 	 */
@@ -94,6 +109,21 @@
 	}
 
 	/**
+	 * @see org.apache.wicket.markup.html.IHeaderResponse#renderCSSReference(org.apache.wicket.ResourceReference, String, boolean)
+	 */
+	public void renderCSSReference(ResourceReference reference, String media, boolean waitForRender) {
+		if (reference == null)
+		{
+			throw new IllegalArgumentException("reference cannot be null");
+		}
+		if (!closed)
+		{
+			CharSequence url = RequestCycle.get().urlFor(reference);
+			renderCSSReference(url.toString(), media, waitForRender);
+		}
+	}
+
+	/**
 	 * @see org.apache.wicket.markup.html.IHeaderResponse#renderCSSReference(java.lang.String)
 	 */
 	public void renderCSSReference(String url)
@@ -109,11 +139,19 @@
 	}
 
 	/**
-	 * @see org.apache.wicket.markup.html.IHeaderResponse#renderCSSReference(java.lang.String,
-	 *      java.lang.String)
+	 * @see org.apache.wicket.markup.html.IHeaderResponse#renderCSSReference(String, String)
 	 */
 	public void renderCSSReference(String url, String media)
 	{
+		renderCSSReference(url, media, false);
+	}
+
+	/**
+	 * @see org.apache.wicket.markup.html.IHeaderResponse#renderCSSReference(String, String)
+	 * @param waitForRender
+	 *            if true ensures the css is rendered before other references are rendered, otherwise not
+	 */
+	private void renderCSSReference(String url, String media, boolean waitForRender) {
 		if (Strings.isEmpty(url))
 		{
 			throw new IllegalArgumentException("url cannot be empty or null");
@@ -123,9 +161,12 @@
 			List<Object> token = Arrays.asList(new Object[] { "css", url, media });
 			if (wasRendered(token) == false)
 			{
-				getResponse().write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
+                getResponse().write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
 				getResponse().write(url);
 				getResponse().write("\"");
+				if (waitForRender) {
+					getResponse().write(" waitForRender=\"waitForRender\" ");
+				}
 				if (media != null)
 				{
 					getResponse().write(" media=\"");
@@ -136,8 +177,7 @@
 				markRendered(token);
 			}
 		}
-	}
+    }
-
 	/**
 	 * @see org.apache.wicket.markup.html.IHeaderResponse#renderJavascriptReference(org.apache.wicket.ResourceReference)
 	 */
Index: wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java
===================================================================
--- wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java	(revision 1049685)
+++ wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java	(revision )
@@ -958,6 +958,15 @@
 		}
 
 		@Override
+		public void renderCSSReference(final ResourceReference reference, final String media, final boolean waitForRender)
+		{
+			if (checkHeaderRendering())
+			{
+				super.renderCSSReference(reference, media, waitForRender);
+			}
+		}
+
+		@Override
 		public void renderCSSReference(String url)
 		{
 			if (checkHeaderRendering())
@@ -993,7 +1002,16 @@
 			}
 		}
 
-		@Override
+    @Override
+		public void renderCSSReference(ResourceReference reference, boolean waitForRender)
+		{
+			if (checkHeaderRendering())
+			{
+				super.renderCSSReference(reference, waitForRender);
+			}
+		}
+
+		@Override
 		public void renderJavascriptReference(ResourceReference reference)
 		{
 			if (checkHeaderRendering())
Index: wicket/src/main/java/org/apache/wicket/markup/html/CSSPackageResource.java
===================================================================
--- wicket/src/main/java/org/apache/wicket/markup/html/CSSPackageResource.java	(revision 731096)
+++ wicket/src/main/java/org/apache/wicket/markup/html/CSSPackageResource.java	(revision )
@@ -32,7 +32,7 @@
  */
 public class CSSPackageResource extends PackageResource
 {
-	private static final long serialVersionUID = 1L;;
+	private static final long serialVersionUID = 1L;
 
 	/**
 	 * Returns a new instance of {@link HeaderContributor} with a header contributor that references
@@ -48,13 +48,32 @@
 	public static final HeaderContributor getHeaderContribution(final Class<?> scope,
 		final String path)
 	{
+		return getHeaderContribution(scope, path, false);
+	}
+
+		/**
+	 * Returns a new instance of {@link HeaderContributor} with a header contributor that references
+	 * a CSS file that lives in a package.
+	 *
+	 * @param scope
+	 *            The scope of the package resource (typically the class of the caller, or a class
+	 *            that lives in the package where the resource lives).
+	 * @param path
+	 *            The path
+	 * @param waitForRender
+	 *            if true, wait for the resource to be rendered before processing other resources
+	 * @return the new header contributor instance
+	 */
+	public static final HeaderContributor getHeaderContribution(final Class<?> scope,
+		final String path, final boolean waitForRender)
+	{
 		return new HeaderContributor(new IHeaderContributor()
 		{
 			private static final long serialVersionUID = 1L;
 
 			public void renderHead(IHeaderResponse response)
 			{
-				response.renderCSSReference(new CompressedResourceReference(scope, path));
+				response.renderCSSReference(new CompressedResourceReference(scope, path), waitForRender);
 			}
 		});
 	}
@@ -75,13 +94,34 @@
 	public static final HeaderContributor getHeaderContribution(final Class<?> scope,
 		final String path, final String media)
 	{
+		return getHeaderContribution(scope, path, media, false);
+	}
+
+	/**
+	 * Returns a new instance of {@link HeaderContributor} with a header contributor that references
+	 * a CSS file that lives in a package.
+	 *
+	 * @param scope
+	 *            The scope of the package resource (typically the class of the caller, or a class
+	 *            that lives in the package where the resource lives).
+	 * @param path
+	 *            The path
+	 * @param media
+	 *            The media type for this CSS ("print", "screen", etc.)
+	 * @param waitForRender
+	 *            if true, wait for the resource to be rendered before processing other resources
+	 * @return the new header contributor instance
+	 */
+	public static final HeaderContributor getHeaderContribution(final Class<?> scope,
+		final String path, final String media, final boolean waitForRender)
+	{
 		return new HeaderContributor(new IHeaderContributor()
 		{
 			private static final long serialVersionUID = 1L;
 
 			public void renderHead(IHeaderResponse response)
 			{
-				response.renderCSSReference(new CompressedResourceReference(scope, path), media);
+				response.renderCSSReference(new CompressedResourceReference(scope, path), media, waitForRender);
 			}
 		});
 	}
@@ -96,13 +136,28 @@
 	 */
 	public static final HeaderContributor getHeaderContribution(final ResourceReference reference)
 	{
+		return getHeaderContribution(reference, false);
+	}
+
+		/**
+	 * Returns a new instance of {@link HeaderContributor} with a header contributor that references
+	 * a CSS file that lives in a package.
+	 *
+	 * @param reference
+	 *
+	 * @param waitForRender
+	 *            if true, wait for the resource to be rendered before processing other resources
+	 * @return the new header contributor instance
+	 */
+	public static final HeaderContributor getHeaderContribution(final ResourceReference reference, final boolean waitForRender)
+	{
 		return new HeaderContributor(new IHeaderContributor()
 		{
 			private static final long serialVersionUID = 1L;
 
 			public void renderHead(IHeaderResponse response)
 			{
-				response.renderCSSReference(reference);
+				response.renderCSSReference(reference, waitForRender);
 			}
 		});
 	}
@@ -119,13 +174,30 @@
 	public static final HeaderContributor getHeaderContribution(final ResourceReference reference,
 		final String media)
 	{
+		return getHeaderContribution(reference, media, false);
+	}
+
+		/**
+	 * Returns a new instance of {@link HeaderContributor} with a header contributor that references
+	 * a CSS file that lives in a package.
+	 *
+	 * @param reference
+	 * @param media
+	 *            The media type for this CSS ("print", "screen", etc.)
+	 * @param waitForRender
+	 *            if true, wait for the resource to be rendered before processing other resources
+	 * @return the new header contributor instance
+	 */
+	public static final HeaderContributor getHeaderContribution(final ResourceReference reference,
+		final String media, final boolean waitForRender)
+	{
 		return new HeaderContributor(new IHeaderContributor()
 		{
 			private static final long serialVersionUID = 1L;
 
 			public void renderHead(IHeaderResponse response)
 			{
-				response.renderCSSReference(reference, media);
+				response.renderCSSReference(reference, media, waitForRender);
 			}
 		});
 	}
Index: wicket/src/main/java/org/apache/wicket/markup/html/DecoratingHeaderResponse.java
===================================================================
--- wicket/src/main/java/org/apache/wicket/markup/html/DecoratingHeaderResponse.java	(revision 1031154)
+++ wicket/src/main/java/org/apache/wicket/markup/html/DecoratingHeaderResponse.java	(revision )
@@ -101,7 +101,17 @@
 		realResponse.renderCSSReference(url, media);
 	}
 
+    public void renderCSSReference(final ResourceReference reference, final boolean waitForRender)
+	  {
+        realResponse.renderCSSReference(reference, waitForRender);
+    }
+
+    public void renderCSSReference(final ResourceReference reference, final String media, final boolean waitForRender)
+	  {
+        realResponse.renderCSSReference(reference, media, waitForRender);
+    }
+
-	public void renderString(CharSequence string)
+    public void renderString(CharSequence string)
 	{
 		realResponse.renderString(string);
 	}
Index: wicket/src/main/java/org/apache/wicket/markup/html/IHeaderResponse.java
===================================================================
--- wicket/src/main/java/org/apache/wicket/markup/html/IHeaderResponse.java	(revision 730127)
+++ wicket/src/main/java/org/apache/wicket/markup/html/IHeaderResponse.java	(revision )
@@ -92,7 +92,17 @@
 
 	/**
 	 * Writes a CSS reference, if the specified reference hasn't been rendered yet.
-	 * 
+	 *
+	 * @param reference
+	 *            resource reference pointing to the CSS resource
+	 * @param waitForRender
+	 *            if true ensures the css is rendered before other references are rendered, otherwise not
+	 */
+	public void renderCSSReference(ResourceReference reference, boolean waitForRender);
+
+	/**
+	 * Writes a CSS reference, if the specified reference hasn't been rendered yet.
+	 * 
 	 * @param url
 	 *            url of the CSS resource
 	 */
@@ -110,7 +120,19 @@
 
 	/**
 	 * Writes a CSS reference, if the specified reference hasn't been rendered yet.
-	 * 
+	 *
+	 * @param reference
+	 *            resource reference pointing to the CSS resource
+	 * @param media
+	 *            the media type for this CSS ("print", "screen", etc.)
+	 * @param waitForRender
+	 *            if true ensures the css is rendered before other references are rendered, otherwise not
+	 */
+	public void renderCSSReference(ResourceReference reference, String media, boolean waitForRender);
+
+	/**
+	 * Writes a CSS reference, if the specified reference hasn't been rendered yet.
+	 * 
 	 * @param url
 	 *            url of the CSS resource
 	 * @param media
Index: wicket/src/main/java/org/apache/wicket/ajax/wicket-ajax.js
===================================================================
--- wicket/src/main/java/org/apache/wicket/ajax/wicket-ajax.js	(revision 1085654)
+++ wicket/src/main/java/org/apache/wicket/ajax/wicket-ajax.js	(revision )
@@ -1469,6 +1469,9 @@
  */
 Wicket.Head = { };
 
+Wicket.Head.csspSequenceNumber = 0;
+
+// sequence number for css head contributions
 Wicket.Head.Contributor = Wicket.Class.create();
 
 Wicket.Head.Contributor.prototype = {
@@ -1486,11 +1489,11 @@
 		// get the header contribution text and unescape it if necessary
 		var text = Wicket._readTextNode(headerNode);	
 	    var encoding = headerNode.getAttribute("encoding");
-	    
+
 	    if (encoding != null && encoding != "") {
-	        text = Wicket.decode(encoding, text);        
-	    }       
-	    
+	        text = Wicket.decode(encoding, text);
+	    }
+
 	    if (Wicket.Browser.isKHTML()) {
 			// konqueror crashes if there is a <script element in the xml, but <SCRIPT is fine. 
 			text = text.replace(/<script/g,"<SCRIPT");
@@ -1580,20 +1583,76 @@
 				notify();
 				return;
 			}
+			// if the waitForRender attribute is present, we wait until the css is rendered
+			// until proceeding with the next step
+			if (node.getAttribute("waitForRender")) {
+				var seqNumber = (Wicket.Head.csspSequenceNumber++);
+
+				var onLoad = function(content) {
+					Wicket.Ajax.invokePostCallHandlers();
+
+					// add element to check if the browser has rendered the css
+					var csspElement = document.createElement("div");
+					csspElement.style.position = "absolute";
+					csspElement.id = "wicketCssp"+seqNumber;
+					document.body.appendChild(csspElement);
+
+					// create stylesheet with padding
+					content += "\n#wicketCssp"+seqNumber+" { left: 42px; } ";
+
+					// setTimeout to call createStyleSheet in IE
+					window.setTimeout(function() {
+						try {
+							// add placeholder element for contains check
+							var css = Wicket.Head.createElement("link");
+							css.setAttribute('href_', node.getAttribute("href"));
+							Wicket.Head.addElement(css);
+
+							// create style element, we can not add content to a link element
+							var styleElement = Wicket.Head.addStyleSheet(content);
+							// use title for IE compatibility
+							styleElement.title = node.getAttribute('href');
+							var csspInterval = window.setInterval(function() {
+								if (csspElement.offsetLeft == 42) {
+									window.clearInterval(csspInterval);
+									document.body.removeChild(csspElement);
+									// continue to next step
+									notify();
+								}
+							}, 10);
+						} catch (exception) {
+							Wicket.Log.error("Wicket.Head.Contributor.processLink: " + exception);
+						}
+					}, 1);
+				};
+
+				// we need to schedule the request as timeout
+				// calling xml http request from another request call stack doesn't work
+				window.setTimeout(function() {
+					var req = new Wicket.Ajax.Request(node.getAttribute('href'), onLoad, false, false);
+					req.debugContent = false;
+					if (Wicket.Browser.isKHTML())
+						// konqueror can't process the ajax response asynchronously, therefore the
+						// javascript loading must be also synchronous
+						req.async = false;
+					req.get();
+				}, 1);
+			} else {
-			// create link element
-			var css = Wicket.Head.createElement("link");
+				// create link element
+				var css = Wicket.Head.createElement("link");
 
-			// copy required attributes
-			css.id = node.getAttribute("id");
-			css.rel = node.getAttribute("rel");
-			css.href = node.getAttribute("href");
-			css.type = node.getAttribute("type");
-			
-			// add element to head
-			Wicket.Head.addElement(css);
-			
-			// continue to next step
-			notify();
+				// copy required attributes
+				css.id = node.getAttribute("id");
+				css.rel = node.getAttribute("rel");
+				css.href = node.getAttribute("href");
+				css.type = node.getAttribute("type");
+
+				// add element to head
+				Wicket.Head.addElement(css);
+
+				// continue to next step
+				notify();
+			}
 		});
 	},
 	
@@ -1604,40 +1663,28 @@
 			if (Wicket.DOM.containsElement(node)) {
 				notify();
 				return;
-			}	
+			}
 			// serialize the style to string
 			var content = Wicket.DOM.serializeNodeChildren(node);
-			
+
-			// create style element
-			var style = Wicket.Head.createElement("style");
-			
-			// copy id attribute
-			style.id = node.getAttribute("id");										
-				
 			// create stylesheet
-			if (Wicket.Browser.isIE()) {
-				try  {
+			try {
-					document.createStyleSheet().cssText = content;
-				}
-				catch(ignore) {
-					var run = function() {
+			  style = Wicket.Head.addStyleSheet(content);
+			} catch (ignore) {
-						try {
+				try {
-							document.createStyleSheet().cssText = content;
+					window.setTimeout(function() {
+						style = Wicket.Head.addStyleSheet(content);
+					});
+				} catch(exception) {
+					Wicket.Log.error("Wicket.Head.Contributor.processStyle: " + exception);
-						}
+				}
-						catch(e) {
-							Wicket.Log.error("Wicket.Head.Contributor.processStyle: " + e);
-						}
+			}
-					}
-					window.setTimeout(run, 1);
-				}
-			} else {			
-				var textNode = document.createTextNode(content);
-				style.appendChild(textNode);
-			} 		
-			Wicket.Head.addElement(style);
+			// copy id attribute
+			style.id = node.getAttribute("id");
-			
+
 			// continue to next step
 			notify();
+
 		});
 	},
 	
@@ -1659,12 +1706,12 @@
 				// load the external javascript using Wicket.Ajax.Request
 				
 				// callback when script is loaded
-                var callBackIdentifier = 'script' + (Wicket.functionExecuterSeq++);
-                var onLoad = function(content) {
-                    Wicket.functionExecuterCallbacks[callBackIdentifier] = function() {
-                        Wicket.Ajax.invokePostCallHandlers();
-                        notify();
-                    }
+				var callBackIdentifier = 'script' + (Wicket.functionExecuterSeq++);
+				var onLoad = function(content) {
+					Wicket.functionExecuterCallbacks[callBackIdentifier] = function() {
+						Wicket.Ajax.invokePostCallHandlers();
+						notify();
+					}
 					Wicket.Head.addJavascript(content+"; Wicket.functionExecuterCallbacks['"+callBackIdentifier+"'](); delete Wicket.functionExecuterCallbacks['"+callBackIdentifier+"']; ", null, src);
 				}
 				// we need to schedule the request as timeout
@@ -1757,7 +1804,7 @@
 	return false;
 }
 
-// Adds a javascript element to page header. 
+// Adds a javascript element to page header.
 // The fakeSrc attribute is used to filter out duplicate javascript references.
 // External javascripts are loaded using xmlhttprequest. Then a javascript element is created and the
 // javascript body is used as text for the element. For javascript references, wicket uses the src 
@@ -1818,6 +1865,20 @@
 	}
 }
 
+/** cross browser create style sheet */
+Wicket.Head.addStyleSheet = function(content) {
+	var styleElement = Wicket.Head.createElement("style");
+	if (Wicket.Browser.isIE()) {
+		styleElement = document.createStyleSheet();
+		styleElement.cssText = content;
+	} else {
+		var textNode = document.createTextNode(content);
+		styleElement.appendChild(textNode);
+		Wicket.Head.addElement(styleElement);
+	}
+	return styleElement;
+}
+
 /**
  * Throttler's purpose is to make sure that ajax requests wont be fired too often.
  */
