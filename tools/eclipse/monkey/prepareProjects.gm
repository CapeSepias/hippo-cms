/*
 * Menu: Prepare Hippo ECM projects
 * Script-Path: /hippo-ecm-tools-eclipse/monkey/prepareProjects.gm
 * Kudos: Wander Grevink (onehippo.com)
 * License: Apache 2.0
 * Job: WorkspaceJob
 * Exec-Mode: Foreground
 * DOM: http://groovy-monkey.sourceforge.net/update/plugins/net.sf.groovyMonkey.dom
 */
import org.eclipse.jdt.internal.core.SetClasspathOperation
import org.eclipse.jdt.core.IClasspathEntry
import org.eclipse.jdt.internal.core.ClasspathEntry
import org.eclipse.jdt.core.IPackageFragmentRoot
import org.eclipse.jdt.core.IClasspathAttribute
import org.eclipse.jdt.core.JavaCore
import org.eclipse.core.internal.resources.Workspace

out.clear()
println "$metadata.menuName started\n"

addProjectDependency('hippo-ecm-quickstart-war', 'hippo-ecm-repository-application')
addProjectDependency('hippo-ecm-quickstart-war', 'hippo-ecm-frontend-application')
addProjectDependency('hippo-ecm-package-war', 'hippo-ecm-repository-application')
addProjectDependency('hippo-ecm-package-war', 'hippo-ecm-frontend-application')

cleanupSharedResources()
cleanupTestResourcesInDependencies('hippo-ecm-quickstart-war')
cleanupTestResourcesInDependencies('hippo-ecm-repository-application')
cleanupTestResourcesInDependencies('hippo-ecm-frontend-application')

convertResourcesToAny('hippo-ecm-repository-upgrade', 'src/main/resources')

println "\n$metadata.menuName finished"

/////////////

def cleanupTestResourcesInDependencies(projectName) {
    removeClasspathEntry(projectName, 'src/test/java')
    removeClasspathEntry(projectName, 'src/test/resources')
    def project = workspace.root.getProject(projectName)
    if (project.isOpen()) {
        def javaProject = project.getNature('org.eclipse.jdt.core.javanature')
        def classpath = javaProject.rawClasspath
        classpath.each() {
            if (it.entryKind == IClasspathEntry.CPE_PROJECT) {
                def name = it.path.lastSegment()
                removeProjectDependency(name, 'hippo-ecm-frontend-engine-test')
                removeProjectDependency(name, 'hippo-ecm-addon-builtin-test')
                removeClasspathEntry(name, 'src/test/java')
                removeClasspathEntry(name, 'src/test/resources')
            }
        }
    }
}

def cleanupSharedResources() {
    workspace.root.projects.each() {
        if (it.isOpen() && it.hasNature('org.eclipse.jdt.core.javanature')) {
            removeClasspathEntry(it.name, 'target/maven-shared-archive-resources')
        }
    }
}

def removeClasspathEntry(projectName, pathPattern) {
    def project = workspace.root.getProject(projectName)
    if (project.isOpen()) {
	    def javaProject = project.getNature('org.eclipse.jdt.core.javanature')
        def classpath = javaProject.getRawClasspath()
        def toBeRemoved = null
        classpath.each() {
            if (it.getPath().toString().contains(pathPattern)) {
                toBeRemoved = it
            }
        }
        if (toBeRemoved != null) {
            println "  Removing classpath entry $pathPattern for $projectName"
            def classpathSet = new LinkedHashSet(Arrays.asList(classpath))
            classpathSet.remove(toBeRemoved)
            classpath = (IClasspathEntry[])classpathSet.toArray()
            def op = new SetClasspathOperation(javaProject, classpath, javaProject.getOutputLocation(), true)
            op.runOperation(monitor)
	    }
	}
}


def addProjectDependency(fromName, toName) {
    def from = workspace.root.getProject(fromName)
    def to = workspace.root.getProject(toName)
    if (from.isOpen() && to.isOpen()) {   
	    def fromProject = from.getNature('org.eclipse.jdt.core.javanature')
	    def classpath = fromProject.getRawClasspath()
	    def classpathSet = new LinkedHashSet(Arrays.asList(classpath))
	    def dependency = new ClasspathEntry(
	        IPackageFragmentRoot.K_SOURCE,     // indicates this classpath entry contains source files.
	        IClasspathEntry.CPE_PROJECT,       // indicates a required project.
	        to.getFullPath(),                  // target project
	        ClasspathEntry.INCLUDE_ALL,        // inclusion patterns
	        ClasspathEntry.EXCLUDE_NONE,       // exclusion patterns
	        null,                              // source attachment
	        null,                              // source attachment root
	        null,                              // specific output folder
	        false,                             // isExported
	        null,                              // accessRules
	        true,                              // combineAccessRules
	        (IClasspathAttribute[])[]          // extraAttributes
	    );        
	    classpathSet.add(dependency)
	    
	    if (classpathSet.size() > classpath.length) {
	        println "  Adding project dependency from $fromName to $toName"
	    	classpath = (IClasspathEntry[])classpathSet.toArray()
	    	def op = new SetClasspathOperation(fromProject, classpath, fromProject.getOutputLocation(), true)
	    	op.runOperation(monitor)
        }
    }
}

def removeProjectDependency(fromName, toName) {
    def from = workspace.root.getProject(fromName)
    def to = workspace.root.getProject(toName)
    if (from.isOpen() && to.isOpen()) {   
        def fromProject = from.getNature('org.eclipse.jdt.core.javanature')
        def classpath = fromProject.getRawClasspath()
        def path = to.getFullPath()
        def toBeRemoved = null
        classpath.each() {
            if (it.getPath().toString().contains(toName)) {
                toBeRemoved = it
            }
        }
        if (toBeRemoved != null) {
            println "  Removing project dependency from $fromName to $toName"
            def classpathSet = new LinkedHashSet(Arrays.asList(classpath))
            classpathSet.remove(toBeRemoved)
            classpath = (IClasspathEntry[])classpathSet.toArray()
            def op = new SetClasspathOperation(fromProject, classpath, fromProject.getOutputLocation(), true)
            op.runOperation(monitor)
        }
    }
}

def convertResourcesToAny(fromName, source) {
    def from = workspace.root.getProject(fromName)
    if (from.isOpen()) {   
        def fromProject = from.getNature('org.eclipse.jdt.core.javanature')
        def classpath = fromProject.getRawClasspath()
        def toBeRemoved = null
        classpath.each() {
            if (it.entryKind == IClasspathEntry.CPE_SOURCE) {
	            if (it.path.toString().contains(source)) {
	                toBeRemoved = it
	            }
            }
        }
        if (toBeRemoved != null) {
            println "  Converting resourses to use any in $fromName"
            def classpathSet = new LinkedHashSet(Arrays.asList(classpath))
            classpathSet.remove(toBeRemoved)
            
	        def dependency = JavaCore.newSourceEntry(from.fullPath.append(source))
	        classpathSet.add(dependency)

            classpath = (IClasspathEntry[])classpathSet.toArray()
            def op = new SetClasspathOperation(fromProject, classpath, fromProject.getOutputLocation(), true)
            op.runOperation(monitor)
        }
    }
}



